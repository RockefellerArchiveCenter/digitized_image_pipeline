AWSTemplateFormatVersion: '2010-09-09'
Description: >
  digitized-image-trigger

  Handles notifications for validation and packaging of incoming digitized still image and textual assets.

Parameters:
  ApplicationEnvironment:
    Type: String
    Description: Environment in which the application should be deployed.
    AllowedValues:
      - dev
      - prod
  ApplicationName:
    Type: String
    Description: Name of the application to be deployed.
  ECSClusterName:
    Type: String
    Description: Name of the ECS Cluster in which the Task should be triggered.
  ECSSubnetName:
    Type: AWS::EC2::Subnet::Id
    Description: Name of the subnet in which the ECS Task should be triggered.

Resources:
  DigitizedImageTriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role which supports running ECS Tasks and Services.
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies: 
        - PolicyName: DigitizedImageRunECSTaskPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'ecs:RunTask'
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/digitized_image_*'
              - Effect: Allow
                Action: 'ecs:DescribeServices'
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ECSClusterName}/*'
              - Effect: Allow
                Action: 'ecs:UpdateService'
                Resource: !Sub 'arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ECSClusterName}/*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringLike:
                    'iam:PassedToService': 'ecs-tasks.amazonaws.com'
        - PolicyName: DigitizedImageParameterStorePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                  - 'ssm:GetParametersByPath*'
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ApplicationEnvironment}/${ApplicationName}*'

  ECSClusterParam:
    Type: AWS::SSM::Parameter
    Properties: 
      AllowedPattern: "^[A-Za-z0-9\\-\\_]+$"
      Description: Name of ECS Cluster in which Task should be triggered.
      Name: !Sub /${ApplicationEnvironment}/${ApplicationName}/ECS_CLUSTER
      Tags: 
        Environment: !Ref ApplicationEnvironment
        Application: !Ref ApplicationName
      Type: String
      Value: !Ref ECSClusterName
  ECSSubnetParam:
    Type: AWS::SSM::Parameter
    Properties: 
      AllowedPattern: "^[A-Za-z0-9\\-\\_]+$"
      Description: Subnet in which ECS Task should be triggered.
      Name: !Sub /${ApplicationEnvironment}/${ApplicationName}/ECS_SUBNET
      Tags: 
        Environment: !Ref ApplicationEnvironment
        Application: !Ref ApplicationName
      Type: String
      Value: !Ref ECSSubnetName
  QCECSServiceParam:
    Type: AWS::SSM::Parameter
    Properties: 
      AllowedPattern: "^[A-Za-z0-9\\-\\_]+$"
      Description: QC Service which runs in ECS.
      Name: !Sub /${ApplicationEnvironment}/${ApplicationName}/QC_ECS_SERVICE
      Tags: 
        Environment: !Ref ApplicationEnvironment
        Application: !Ref ApplicationName
      Type: String
      Value: !ImportValue DigitizedImage-QcEcsServiceName

  DigitizedImageTriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub 'rac-${ApplicationEnvironment}-lambda'
        S3Key: !Sub '${ApplicationName}.zip'
      FunctionName: !Ref ApplicationName
      Handler: handle_digitized_image_trigger.lambda_handler
      Role: !GetAtt DigitizedImageTriggerFunctionRole.Arn
      Runtime: python3.9
      Timeout: 10
      Environment:
        Variables:
          ENV:
            Ref: ApplicationEnvironment
          APP_CONFIG_PATH:
            Ref: ApplicationName
      Architectures:
        - x86_64
      Tags: 
        - Key: Environment
          Value: !Ref ApplicationEnvironment
        - Key: Application
          Value: !Ref ApplicationName

  TriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DigitizedImageTriggerFunction}"
      RetentionInDays: 90

  # Allow S3 to trigger Lambda
  DigitizedImageTriggerS3FunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DigitizedImageTriggerFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::rac-${ApplicationEnvironment}-image-upload-*

  # Allow SNS to trigger Lambda
  DigitizedImageTriggerSNSFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DigitizedImageTriggerFunction
      Principal: sns.amazonaws.com
      SourceArn: !ImportValue DigitizedImage-SNSTopicArn
  
  # Subscribe Lambda to SNS
  DigitizedImageTriggerFunctionDigitizedImageEvents:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt DigitizedImageTriggerFunction.Arn
      Protocol: lambda
      TopicArn: !ImportValue DigitizedImage-SNSTopicArn

Outputs:
  DigitizedImageTriggerFunction:
    Description: "Digitized Image Trigger Lambda Function ARN"
    Value: !GetAtt DigitizedImageTriggerFunction.Arn
    Export:
      Name: DigitizedImage-TriggerArn
